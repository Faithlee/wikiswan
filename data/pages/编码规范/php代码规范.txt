====== 绪论 ======
===== 编码规范的意义 =====

好的编码规范对任何开发项目都很重要，特别是很多开发者共同在同一项目上工作。编码规范帮助确保代码的高质量、少
bug 和易维护。

====== PHP File 文件格式 ======

===== 常规 =====

对于只包含有 PHP
代码的文件，结束标志（"?>"）是不允许存在的，PHP自身不需要（"?>"）,
这样做可以防止它的末尾的被意外地注入空白并显示输出。


===== 缩进 =====

使用四个空格进行缩进，而不要使用制表符 TAB 。


===== 行的最大长度 =====

一行 80 字符以内是比较合适的，长点也可以，但最多为 120 个字符。


===== 行结束标志 =====

行结束标志只能是标准的 unix 文本文件的换行，也就是 "\n"， 换行符的ASCII为
10，或16进制的 0x0A。

不要使用 Macintosh 电脑的回车，也就是 "\r"，ASCII为 0x0D。

不要使用 Windows 电脑的回车换行组合，也就是 "\r\n"，ASCII为 0x0D 0x0A。

====== 命名约定 ======

===== 类 =====

类名只允许有小写字母、数字和下划线，但不鼓励使用数字。多个单词的情况下，每个单词必须使用下划线进行分隔。\\
再次强调，类名中的所有字母必须小写。\\
类名必须以 "swan_lib" 、"sw_lib" 或 "sw" 作为前缀。

可接受的类名的例子：\\ 
swan_lib_app_user \\
sw_lib_hash \\ 
sw_router \\ 

===== 文件名 =====

文件名只允许有小写字母、数字和下划线，但不鼓励使用数字。多个单词的情况下，每个单词必须使用下划线进行分隔。\\
再次强调，文件名中的所有字母必须小写。\\
包含有类的文件的文件名必须以类名作为文件名，并且要以 ".class.php" 作为结尾。

===== 函数和方法 =====

函数名只允许有小写字母、数字和下划线，但不鼓励使用数字。多个单词的情况下，每个单词必须使用下划线进行分隔。

再次强调，函数名中的所有字母必须小写。

我们鼓励使用冗长的名字，这样容易理解代码。

对于面向对象编程，对象的访问器总是以 "get" 或 "set" 为前缀。

在对象中的方法，声明为 "private" 或 "protected" 的，
名字的首字符必须是一个单个的下划线，声明为 "public" 的从不以下划线开头。

===== 变量 =====

变量名只允许有小写字母、数字和下划线，但不鼓励使用数字。多个单词的情况下，每个单词必须使用下划线进行分隔。

再次强调，变量名中的所有字母必须小写。

声明为 "private" 或 "protected" 的类成员变量名必须以两个下划线开头，声明为
"public" 的从不以下划线开头。

我们鼓励使用冗长的名字，这样容易理解代码。除非在非常简单的单层循环中，其他情况一律不要使用短小的名字，如
"$i" 和 "$n" 。如果一个循环超过 20
行代码，索引的变量名必须有个具有描述意义的名字。


===== 常量 =====

常量名只允许有大写字母、数字和下划线，但不鼓励使用数字。多个单词的情况下，每个单词必须使用下划线进行分隔。

再次强调，常量名中的所有字母必须大写。

对于面向对象编程，常量必须通过 "const" 定义为类的成员，不鼓励使用 "define"
定义的全局常量。

====== 编码风格 ======

===== PHP 代码划分 =====

PHP 代码总是用完整的标准的 PHP 标签定界：
<code php>
<?php

?>
</code>
短标签 "<? ?>" 是不允许的，只包含 PHP 代码的文件，不要加结束标签 （参见 第 2.1
节“常规”）。

===== 字符串 =====

==== 字符串文字 ====

当字符串是文字（不包含变量），用单引号包围字符串，而不要使用双引号：
<code php>
$str = 'example string';
</code>

==== 包含单引号（'）的字符串文字 ====

当文字字符串包含单引号就用双引号包围，特别在 SQL 语句中：
<code php>
$sql = "SELECT id, name from people WHERE name='Fred' OR name='Susan'";
</code>
在需要转义单引号的情况下，上述语法更加合适。

==== 变量替换 ====

变量替换有下面两种形式：
<code php>
$greeting = "Hello $name, welcome back!";
$greeting = "Hello {$name}, welcome back!";
</code>
为保持一致，不允许使用下面形式：
<code php>
$greeting = "Hello ${name}, welcome back!";
</code>

==== 字符串连接 ====

字符串用 "." 操作符连接，在它的前后加上空格以提高可读性：
<code php>
$company = 'swan' . ' ' . 'linux';
</code>
当用 "."
操作符连接字符串，代码可以分成多个行，也是为提高可读性。在这些例子中，每个连续的行应当由空格来填补，例如
"." 和 "=" 对齐：
<code php>
$sql = "SELECT id, name FROM people "
     . "WHERE name = 'Susan' "
     . "ORDER BY name ASC ";
</code>

===== 数组 =====

==== 数字索引数组 ====

索引不能为负数。

建议数组索引从 0 开始。

当用 array 声明有索引的数组，在每个逗号的后面加个空格以提高可读性：
<code php>
$sample_array = array(1, 2, 3, 'swan', 'linux');
</code>
也可以用 "array" 声明多行有索引的数组，在每个连续行的开头要用空格填补对齐：
<code php>
$sample_array = array(1, 2, 3, 'swan', 'linux',
                      $a, $b, $c,
                      56.44, $d, 500);
</code>
当数组的每个元素都是相对较长的字符串时，我们鼓励把代码分成多行，在每个连续行的开头用空格填补来对齐元素值：
<code php>
$sample_array =
	array(
	 'first_value',
	 'second_value',
	);
</code>
对于上面那个例子，虽然数组的最后一个元素的值的后面的逗号不是必须的，但是我们鼓励加上，这样可以防止今后添加元素带来的问题。

===== 类 =====

==== 类的声明 ====

用下面的约定来命名类。

花括号总是从类名下一行开始。

每个类必须有一个符合 PHPDocumentor 标准的文档块。

四个空格的缩进。

每个 PHP 文件中只有一个类。

放另外的代码到类里允许但不鼓励。在这些文件中，用两行空行来分隔类和其它代码。

这是个可接受的类的例子：
<code php>
/**
 * 类的注释
 */
class sample_class
{
     // 类的代码内容
     // 每行必须缩进4个空格
}
</code>
==== 类成员变量 ====

必须用下面的变量名约定来命名类成员变量。

变量的声明必须在类的顶部，要先于方法的声明。

不允许使用 var （因为我们使用的是php5 ），要用 private、 protected 或
public。直接访问变量允许但不鼓励，最好使用访问器 （set/get）。

===== 函数和方法 =====

==== 函数和方法声明 ====

必须用下面的变量名约定来命名函数。

在类中的函数必须用 private、 protected 或 public 声明它们的可见性。

象类一样，花括号从函数名的下一行开始，函数名和括参数的圆括号中间没有空格。

强烈反对使用全局函数。

可接受的在类中的函数声明的例子：
<code php>
/**
 * 类的注释
 */
class sample_class
{
    /**
     * 函数的注释
     */
    public function bar()
    {
       // 函数的代码内容
       // 每行必须缩进4个空格（如果加上类缩进的4个空格，每行的缩进实际上就应该是8个空格）
    }
}
</code>

注： 引用传递只在函数声明中允许：
<code php>
/**
 * 类的注释
 */
class sample_class
{
    /**
     * 函数的注释
     */
    public function bar(&$baz)
    {	
    }
}
</code>
引用传递在调用时是禁止的。

返回值不能在圆括号中，这妨碍可读性而且如果将来方法被修改成引用传递方式，代码会有问题。
<code php>
/**
 * 类的注释
 */
class sample_class
{
    /**
     * 错误的return
     */
    public function bar(&$baz)
    {
       return($this->bar);
    }

    /**
     * 正确的return
     */
    public function bar()
    {
        return $this->bar;
    }
}
</code>

==== 函数和方法的用法 ====

函数的参数用逗号和紧接着的空格分开，下面的例子中的函数带有三个参数：
<code php>
three_arguments(1, 2, 3);
</code>
引用传递方式在调用的时候是禁止的，参见 （第 4.5.1
节“函数和方法声明”）一节如何正确使用函数的引用传递方式。

带有数组参数的函数，函数的调用可包括 "array"
并分成多行来提高可读性，同时，书写数组的标准仍然适用：
<code php>
three_arguments(array(1, 2, 3), 2, 3);

three_arguments(array(1, 2, 3, 'swan', 'linux',
                      $a, $b, $c,
                      56.44, $d, 500), 2, 3);
</code>
===== 控制语句 =====

==== If / Else / Elseif ====

使用 if 和 elseif 的控制语句在条件语句的圆括号前后都必须有一个空格。

在圆括号里的条件语句，操作符必须用空格分开，鼓励使用多重圆括号以提高在复杂的条件中划分逻辑组合。

前花括号必须和条件语句在同一行，后花括号单独在最后一行，其中的内容用四个空格缩进。
<code php>
if (2 != $a) {
    $a = 2;
}
</code>
下面的例子示例 "if" 语句， 包括 "elseif" 或 "else" 的格式约定：
<code php>
if (2 != $a) {
    $a = 2;
} else {
    $a = 7;
}

if (2 > $a) {
    $a = 2;
} else if (4 < $a) {
    $a = 4;
} else {
    $a = 3;
}
</code>
在有些情况下， PHP 允许这些语句不用花括号，但我们规定，它们（"if"、 "elseif"
或 "else" 语句）必须使用花括号。

"elseif" 是允许的但强烈不鼓励，我们支持 "else if" 组合。

==== Switch ====

在 "switch" 结构里的控制语句在条件语句的圆括号前后必须都有一个单个的空格。

"switch" 里的代码必须有四个空格缩进，在"case"里的代码再缩进四个空格。
<code php>
switch ($num_people) {
    case 1:
        break;

    case 2:
        break;

    default:
        break;
}
</code>
switch 语句中必须有 default。

注： 有时候，在从一个 case 落空到下个 case 的 case 语句中不写 break 或
return 很有用。为了区别于 bug，任何 case 语句中，所有不写 break 或 return
的地方必须有：
<code php>
// 此处有意省略break
</code>
这样的注释。
cumentor 格式兼容。

==== 文件 ====

每个包含 PHP 代码的文件必须至少在文件顶部包含这些 phpDocumentor 标签：
<code php>
<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: */

/**
 * 文件的详细描述
 *
 * @category   文件所属分类名
 * @package    文件所属包（模块）名
 * @copyright  $_SWANLINUX_COPYRIGHT_$
 * @version    $_SWANLINUX_VERSION_$
 */

/**
 * require
 */
require_once 'swan_lib_test.class.php'
// 代码

?>
</code> 
==== 类 ====

每个类必须至少包含这些 phpDocumentor 标签：
<code php>
/**
 * 类的详细描述
 *
 * @category   类所属分类名
 * @package    类所属包（模块）名
 * @subpackage 类所属的子包（模块）名
 */
</code>

@subpackage标签要根据实际情况设定，有时可以省略。
==== 函数 ====

每个函数，包括对象方法，必须有最少包含下列内容的文档块：

函数的描述。

所有参数。

所有可能的返回值。

因为访问级已经通过 "public"、 "private" 或 "protected" 声明， 不需要使用
"@access"。

每个函数，包括对象方法，必须至少包含这些 phpDocumentor 标签：
<code php>
/**
 * 函数的详细描述
 *
 * @param string param_a 参数a说明
 * @param integer param_b 参数b说明
 *
 * @return integer 返回值说明
 */
</code>
如果没有任何参数，就省略参数说明。
即使没有返回值，也不能省略返回值说明，应说明为 @return void

===== 折叠 =====

代码块的自动折叠只适用于使用vim编辑文件的情况。

代码块的折叠不强制要求，但是强烈鼓励。如果加入了代码块的自动折叠，则必须遵守下面的约定。

==== 折叠的标记 ====

<nowiki>折叠的起始标记为 "{{{"，必须以 "//" 注释作为单独的一行，"//" 和 "{{{"
之间要有一个空格，如果有描述，则描述和 "{{{" 之间要有一个空格。</nowiki>

**例子：**
<code php>
// {{{ 折叠起始描述
</code>

<nowiki>折叠的起始标记为 "}}}"，必须以 "//" 注释作为单独的一行，"//" 和 "}}}"
之间要有一个空格，如果有描述，则描述和 "}}}" 之间要有一个空格。</nowiki>

**例子：**
<code php>
// }}} 折叠结束描述
</code>
==== 函数的折叠 ====

**使用如下约定进行函数的折叠：**

  * 使用 "去掉圆括号中参数的函数声明" 的那行代码来作为折叠起始描述。
  * 两个同级别的折叠的结束和起始放到相邻的两行，中间不加空行。

**例子：**
<code php>
// {{{ function foo()

/**
 * 函数的注释
 */
function foo()
{
    // 函数的代码内容
}

// }}}
// {{{ function bar()

/**
 * 函数的注释
 */
function bar()
{
    // 函数的代码内容
}

// }}}
</code>
==== 类的折叠 ====

**类的折叠使用如下规则：**

  * 类的成员变量要放到一起进行一个整体折叠，折叠的起始描述为
  * "members"，结束描述为 "end members"。
  * 类的常量要放到一起进行一个整体折叠，折叠的起始描述为
  * "consts"，结束描述为 "end consts"。
  * 类的方法要放到一起进行一个整体折叠，折叠的起始描述为
  * "functions"，结束描述为 "end functions"。
  * 类的每个方法要进行一个折叠，使用 "去掉圆括号中参数的方法声明"
  * 的那行代码来作为折叠起始描述。

鼓励使用嵌套折叠（上面的每个方法的折叠就嵌套在方法的整体折叠中）。

折叠要与被折叠的代码的起始行具有相同的缩进。

**例子：**
<code php>
/**
 * 类的注释
 */
class sample_class
{
    // {{{ consts
    /**
     * 常量注释
     */
    const FOO = 'swan';

    /**
     * 常量注释
     */
    const BAR = 'linux';

    // }}} end consts
    // {{{ members

    /**
     * 属性注释
     */
    protected $__foo = 'swan';
	
    /**
     * 属性注释
     */
    protected $__bar = 'bar';

    // }}} end members
    // {{{ functions
    // {{{ public function foo()

    /**
     * 方法注释
     */
    public function foo($param_a, $param_b)
    {
    }

    //}}}
    //{{{ public function bar()
	
    /**
     * 方法注释
     */
    public function bar()
    {
    }
    //}}}
    //}}} end members
</code>


====== 参考文献 ======

此代码规范改编自[[http://framework.zend.com/manual/en/coding-standard.html|《Zend
Framework PHP 编码标准》]]
